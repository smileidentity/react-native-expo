name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
  timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Lint
    run: yarn lint
      - name: Typecheck
        run: yarn typecheck || yarn expo-module typecheck

  build-library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build package
        run: |
          yarn clean || true
          yarn build || yarn expo-module build
          yarn prepare || yarn expo-module prepare
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            build/**
            *.tgz

  android-validate:
    runs-on: ubuntu-latest
    needs: build-library
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Expo Doctor (autolinking check)
        run: |
          cd sample-expo
          npx --yes expo-doctor . --fix --ci
      - name: Prebuild sample app
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform android --no-install --clean
      - name: Gradle assemble
        working-directory: sample-expo/android
        run: ./gradlew --no-daemon assembleDebug

  ios-validate:
    runs-on: macos-14
    needs: build-library
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            sample-expo/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('sample-expo/ios/Podfile.lock') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Expo Doctor (autolinking check)
        run: |
          cd sample-expo
          npx --yes expo-doctor . --fix --ci
      - name: Prebuild sample app (iOS)
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform ios --no-install --clean
      - name: Install pods
        run: |
          cd sample-expo/ios
          pod install --repo-update
      - name: Xcode build
        run: |
          set -euo pipefail
          cd sample-expo/ios
          WORKSPACE=$(ls *.xcworkspace | head -n1)
          if [ -z "$WORKSPACE" ]; then echo "No .xcworkspace found"; exit 1; fi
          # Detect first scheme from workspace
          SCHEME=$(xcodebuild -list -json -workspace "$WORKSPACE" | ruby -rjson -e 'data=JSON.parse(STDIN.read); w=data["workspace"]; puts (w && w["schemes"] && w["schemes"][0]) || ""')
          if [ -z "$SCHEME" ]; then echo "No scheme found in $WORKSPACE"; exit 1; fi
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            build

  podspec-lint:
    runs-on: macos-14
    needs: build-library
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Pod lib lint
        env:
          COCOAPODS_DISABLE_STATS: 'true'
        run: |
          set -e
          gem install cocoapods --no-document || true
          pod repo update || true
          echo "First attempt: lint with trunk/CDN sources"
          if pod lib lint ios/SmileIDExpo.podspec --allow-warnings --fail-fast --skip-tests --sources='trunk,https://cdn.cocoapods.org/'; then
            exit 0
          fi
          echo "Retrying after adding full CocoaPods Specs repo (this may take a while)"
          pod repo add cocoapods https://github.com/CocoaPods/Specs.git || true
          pod repo update cocoapods || true
          pod lib lint ios/SmileIDExpo.podspec --allow-warnings --fail-fast --skip-tests --sources='cocoapods,trunk,https://cdn.cocoapods.org/'

  pack-verify:
    runs-on: ubuntu-latest
    needs: build-library
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Pack tarball
        run: echo "TARBALL=$(npm pack --silent)" >> $GITHUB_ENV
      - name: List tarball contents
        run: tar -tzf "$TARBALL" | tee pack.txt
      - name: Verify pack contents (types and entry)
        run: |
          grep -E '^package/build/index\.js$' pack.txt
          grep -E '^package/build/index\.d\.ts$' pack.txt
