name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Lint main package
        run: yarn lint
      - name: Typecheck main package
        run: yarn expo-module typecheck
      - name: Install sample-react-native dependencies
        run: |
          cd sample-react-native
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Lint sample-react-native
        run: |
          cd sample-react-native
          yarn lint
      - name: Test sample-react-native
        run: |
          cd sample-react-native
          yarn test
      - name: Test main package
        run: yarn test

  build-library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build package
        run: |
          yarn clean || true
          yarn build || yarn expo-module build
          yarn prepare || yarn expo-module prepare
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            build/**
            *.tgz

  android-validate:
    runs-on: ubuntu-latest
    needs: build-library
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample-expo dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Prebuild sample-expo app
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform android --no-install --clean
      - name: Gradle assemble sample-expo
        working-directory: sample-expo/android
        run: ./gradlew --no-daemon assembleDebug

  android-react-native-validate:
    runs-on: ubuntu-latest
    needs: build-library
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - name: Cache sample-react-native node_modules
        uses: actions/cache@v4
        with:
          path: sample-react-native/node_modules
          key: ${{ runner.os }}-sample-react-native-node_modules-${{ hashFiles('sample-react-native/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-react-native-node_modules-
      - name: Install sample-react-native dependencies
        run: |
          cd sample-react-native
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Gradle assemble sample-react-native
        working-directory: sample-react-native/android
        run: ./gradlew --no-daemon assembleDebug

  ios-validate:
    runs-on: macos-14
    needs: build-library
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            sample-expo/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('sample-expo/ios/Podfile.lock') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample-expo dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi

      - name: Prebuild sample-expo app (iOS)
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform ios --no-install --clean
          # Verify prebuild was successful
          if [ ! -d "ios" ]; then
            echo "‚ùå iOS directory was not created by expo prebuild"
            exit 1
          fi
          echo "‚úÖ Expo prebuild completed successfully"
      - name: Install pods for sample-expo
        run: |
          cd sample-expo/ios
          pod install --repo-update
          # Verify workspace was created
          if [ ! -f *.xcworkspace/contents.xcworkspacedata ]; then
            echo "‚ùå No valid .xcworkspace found after pod install"
            ls -la
            exit 1
          fi
          echo "‚úÖ CocoaPods installation completed successfully"
      - name: Xcode build sample-expo
        run: |
          set -euo pipefail
          cd sample-expo/ios
          
          # List all available files for debugging
          echo "üìÅ Contents of ios directory:"
          ls -la
          
          # Find workspace file
          WORKSPACE=$(find . -name "*.xcworkspace" -type d | head -n1)
          if [ -z "$WORKSPACE" ]; then 
            echo "‚ùå No .xcworkspace found"
            exit 1
          fi
          
          # Remove leading ./
          WORKSPACE=${WORKSPACE#./}
          echo "üîç Found workspace: $WORKSPACE"
          
          # Verify workspace has contents
          if [ ! -f "$WORKSPACE/contents.xcworkspacedata" ]; then
            echo "‚ùå Workspace $WORKSPACE does not contain contents.xcworkspacedata"
            exit 1
          fi
          
          # Get schemes
          SCHEMES_JSON=$(xcodebuild -list -json -workspace "$WORKSPACE" 2>/dev/null || echo '{}')
          if [ "$SCHEMES_JSON" = "{}" ]; then
            echo "‚ùå Failed to get schemes from workspace"
            exit 1
          fi
          
          # Extract first scheme
          SCHEME=$(echo "$SCHEMES_JSON" | ruby -rjson -e 'data=JSON.parse(STDIN.read); w=data["workspace"]; puts (w && w["schemes"] && w["schemes"][0]) || ""' 2>/dev/null || echo "")
          if [ -z "$SCHEME" ]; then 
            echo "‚ùå No scheme found in $WORKSPACE"
            echo "Available schemes:"
            echo "$SCHEMES_JSON" | ruby -rjson -e 'data=JSON.parse(STDIN.read); w=data["workspace"]; puts w["schemes"] if w && w["schemes"]' 2>/dev/null || echo "Failed to parse schemes"
            exit 1
          fi
          
          echo "üéØ Using scheme: $SCHEME"
          
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            build

  ios-react-native-validate:
    runs-on: macos-14
    needs: build-library
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            sample-react-native/ios/Pods
          key: ${{ runner.os }}-rn-pods-${{ hashFiles('sample-react-native/ios/Podfile.lock') }}
      - name: Cache sample-react-native node_modules
        uses: actions/cache@v4
        with:
          path: sample-react-native/node_modules
          key: ${{ runner.os }}-sample-react-native-node_modules-${{ hashFiles('sample-react-native/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-react-native-node_modules-
      - name: Install sample-react-native dependencies
        run: |
          cd sample-react-native
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Install pods for sample-react-native
        run: |
          cd sample-react-native/ios
          pod install --repo-update
          # Verify workspace was created
          if [ ! -f *.xcworkspace/contents.xcworkspacedata ]; then
            echo "‚ùå No valid .xcworkspace found after pod install"
            ls -la
            exit 1
          fi
          echo "‚úÖ CocoaPods installation completed successfully"
      - name: Xcode build sample-react-native
        run: |
          set -euo pipefail
          cd sample-react-native/ios
          
          # List all available files for debugging
          echo "üìÅ Contents of ios directory:"
          ls -la
          
          # Find workspace file
          WORKSPACE=$(find . -name "*.xcworkspace" -type d | head -n1)
          if [ -z "$WORKSPACE" ]; then 
            echo "‚ùå No .xcworkspace found"
            exit 1
          fi
          
          # Remove leading ./
          WORKSPACE=${WORKSPACE#./}
          echo "üîç Found workspace: $WORKSPACE"
          
          # Verify workspace has contents
          if [ ! -f "$WORKSPACE/contents.xcworkspacedata" ]; then
            echo "‚ùå Workspace $WORKSPACE does not contain contents.xcworkspacedata"
            exit 1
          fi
          
          # Get schemes
          SCHEMES_JSON=$(xcodebuild -list -json -workspace "$WORKSPACE" 2>/dev/null || echo '{}')
          if [ "$SCHEMES_JSON" = "{}" ]; then
            echo "‚ùå Failed to get schemes from workspace"
            exit 1
          fi
          
          # Extract first scheme
          SCHEME=$(echo "$SCHEMES_JSON" | ruby -rjson -e 'data=JSON.parse(STDIN.read); w=data["workspace"]; puts (w && w["schemes"] && w["schemes"][0]) || ""' 2>/dev/null || echo "")
          if [ -z "$SCHEME" ]; then 
            echo "‚ùå No scheme found in $WORKSPACE"
            echo "Available schemes:"
            echo "$SCHEMES_JSON" | ruby -rjson -e 'data=JSON.parse(STDIN.read); w=data["workspace"]; puts w["schemes"] if w && w["schemes"]' 2>/dev/null || echo "Failed to parse schemes"
            exit 1
          fi
          
          echo "üéØ Using scheme: $SCHEME"
          
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            build

  ci-success:
    runs-on: ubuntu-latest
    needs: [lint, build-library, android-validate, android-react-native-validate, ios-validate, ios-react-native-validate]
    if: always()
    steps:
      - name: Check CI Results
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.build-library.result }}" == "success" && \
                "${{ needs.android-validate.result }}" == "success" && \
                "${{ needs.android-react-native-validate.result }}" == "success" && \
                "${{ needs.ios-validate.result }}" == "success" && \
                "${{ needs.ios-react-native-validate.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed!"
            exit 0
          else
            echo "‚ùå Some CI checks failed:"
            echo "  - Lint: ${{ needs.lint.result }}"
            echo "  - Build Library: ${{ needs.build-library.result }}"
            echo "  - Android Expo: ${{ needs.android-validate.result }}"
            echo "  - Android React Native: ${{ needs.android-react-native-validate.result }}"
            echo "  - iOS Expo: ${{ needs.ios-validate.result }}"
            echo "  - iOS React Native: ${{ needs.ios-react-native-validate.result }}"
            exit 1
          fi