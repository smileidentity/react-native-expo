name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Lint
        run: yarn lint
      - name: Typecheck
        run: yarn expo-module typecheck

  build-library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build package
        run: |
          yarn clean || true
          yarn build || yarn expo-module build
          yarn prepare || yarn expo-module prepare
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            build/**
            *.tgz

  android-validate:
    runs-on: ubuntu-latest
    needs: build-library
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Verify Gradle context
        working-directory: sample-expo/android
        run: |
          echo "Gradle wrapper distribution:"
          grep distributionUrl gradle/wrapper/gradle-wrapper.properties || true
          echo
          echo "Android Gradle Plugin line in build.gradle:"
          grep -n \"com.android.tools.build:gradle\" build.gradle || true
          echo
          echo \"Resolved buildscript classpath (should list :8.13.0):\"
          ./gradlew -q buildEnvironment | grep -F \"com.android.tools.build:gradle\" || true
          echo
          echo \"Root dir (Gradle property):\"
          ./gradlew -q properties | grep \"^rootDir\" || true
          echo
          ./gradlew --version
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample-expo dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Prebuild sample-expo app
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform android --no-install --clean
      - name: Gradle assemble sample-expo
        working-directory: sample-expo/android
        run: ./gradlew --no-daemon assembleDebug

  ios-validate:
    runs-on: macos-14
    needs: build-library
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            sample-expo/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('sample-expo/ios/Podfile.lock') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample-expo dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi

      - name: Prebuild sample-expo app (iOS)
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform ios --no-install --clean
      - name: Install pods for sample-expo
        run: |
          cd sample-expo/ios
          pod install --repo-update
      - name: Xcode build sample-expo
        run: |
          set -euo pipefail
          cd sample-expo/ios
          
          # Check if workspace exists
          WORKSPACE=$(find . -name "*.xcworkspace" -maxdepth 1 | head -n1)
          if [ -z "$WORKSPACE" ]; then 
            echo "No .xcworkspace found in $(pwd)"
            ls -la
            exit 1
          fi
          
          WORKSPACE=$(basename "$WORKSPACE")
          echo "Found workspace: $WORKSPACE"
          
          # Check if workspace directory and contents exist
          if [ ! -d "$WORKSPACE" ]; then
            echo "Workspace directory $WORKSPACE does not exist"
            exit 1
          fi
          
          if [ ! -f "$WORKSPACE/contents.xcworkspacedata" ]; then
            echo "Workspace contents file $WORKSPACE/contents.xcworkspacedata does not exist"
            exit 1
          fi
          
          # Detect first scheme from workspace with better error handling
          SCHEME_OUTPUT=$(xcodebuild -list -json -workspace "$WORKSPACE" 2>/dev/null || echo '{}')
          if [ "$SCHEME_OUTPUT" = '{}' ]; then
            echo "Failed to get schemes from workspace, trying direct scheme detection"
            # Fallback: try to find scheme from project file
            SCHEME=$(find . -name "*.xcodeproj" | head -n1 | xargs basename -s .xcodeproj)
            if [ -z "$SCHEME" ]; then
              echo "No scheme found and no project file found"
              exit 1
            fi
          else
            SCHEME=$(echo "$SCHEME_OUTPUT" | ruby -rjson -e 'begin; data=JSON.parse(STDIN.read); w=data["workspace"]; puts (w && w["schemes"] && w["schemes"][0]) || ""; rescue; puts ""; end' 2>/dev/null || echo "")
            if [ -z "$SCHEME" ]; then
              echo "No scheme found in workspace JSON, trying project fallback"
              SCHEME=$(find . -name "*.xcodeproj" | head -n1 | xargs basename -s .xcodeproj)
            fi
          fi
          
          if [ -z "$SCHEME" ]; then 
            echo "No scheme found in $WORKSPACE"
            echo "Available files:"
            ls -la
            exit 1
          fi
          
          echo "Using scheme: $SCHEME"
          
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Debug \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            build

  ci-success:
    runs-on: ubuntu-latest
    needs: [lint, build-library, android-validate, ios-validate]
    if: always()
    steps:
      - name: Check CI Results
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.build-library.result }}" == "success" && \
                "${{ needs.android-validate.result }}" == "success" && \
                "${{ needs.ios-validate.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "  - Lint: ${{ needs.lint.result }}"
            echo "  - Build Library: ${{ needs.build-library.result }}"
            echo "  - Android Expo: ${{ needs.android-validate.result }}"
            echo "  - iOS Expo: ${{ needs.ios-validate.result }}"
            exit 1
          fi
