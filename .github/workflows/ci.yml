name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Lint
        run: yarn lint
      - name: Typecheck
        run: yarn expo-module typecheck

  build-library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build package
        run: |
          yarn clean || true
          yarn build || yarn expo-module build
          yarn prepare || yarn expo-module prepare
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            build/**
            *.tgz

  android-validate:
    runs-on: ubuntu-latest
    needs: build-library
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample-expo dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi
      - name: Prebuild sample-expo app
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform android --no-install --clean
      - name: Gradle assemble sample-expo
        working-directory: sample-expo/android
        run: ./gradlew --no-daemon assembleDebug

  ios-validate:
    # React Native 0.81 (Expo SDK 54) requires Xcode >= 16.1, which is available on macos-15 runners
    runs-on: macos-15
    needs: build-library
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Select Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            sample-expo/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('sample-expo/ios/Podfile.lock') }}
      - name: Cache sample-expo node_modules
        uses: actions/cache@v4
        with:
          path: sample-expo/node_modules
          key: ${{ runner.os }}-sample-expo-node_modules-${{ hashFiles('sample-expo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-sample-expo-node_modules-
      - name: Install sample-expo dependencies
        run: |
          cd sample-expo
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; else yarn install; fi

      - name: Prebuild sample-expo app (iOS)
        run: |
          cd sample-expo
          npx --yes expo prebuild --platform ios --no-install --clean
      - name: Install pods for sample-expo
        run: |
          cd sample-expo/ios
          pod install --repo-update
      - name: Xcode build sample-expo
        run: |
          set -euo pipefail
          cd sample-expo/ios
          
          # Check if workspace exists
          WORKSPACE=$(find . -name "*.xcworkspace" -maxdepth 1 | head -n1)
          if [ -z "$WORKSPACE" ]; then 
            echo "No .xcworkspace found in $(pwd)"
            ls -la
            exit 1
          fi
          
          WORKSPACE=$(basename "$WORKSPACE")
          echo "Found workspace: $WORKSPACE"
          
          # Check if workspace directory and contents exist
          if [ ! -d "$WORKSPACE" ]; then
            echo "Workspace directory $WORKSPACE does not exist"
            exit 1
          fi
          
          if [ ! -f "$WORKSPACE/contents.xcworkspacedata" ]; then
            echo "Workspace contents file $WORKSPACE/contents.xcworkspacedata does not exist"
            exit 1
          fi
          
          # Determine app scheme. Expo prebuild may rename the native project to the slug (sampleexpo)
          echo "Resolving app scheme..."
          SCHEMES_JSON=$(xcodebuild -list -json -workspace "$WORKSPACE" 2>/dev/null || echo '{}')
          echo "$SCHEMES_JSON" > /tmp/xcworkspace_schemes.json || true
          # Candidate scheme names in priority order
          CANDIDATES=("sampleexpo" "reactnativeexpoexample" "sample-expo")
          APP_SCHEME=""
          for C in "${CANDIDATES[@]}"; do
            if grep -q "\"$C\"" /tmp/xcworkspace_schemes.json; then
              APP_SCHEME="$C"
              break
            fi
          done
          if [ -z "$APP_SCHEME" ]; then
            # Fallback: try to pick a scheme matching the workspace name (without extension)
            WS_NAME="${WORKSPACE%.xcworkspace}"
            if grep -q "\"$WS_NAME\"" /tmp/xcworkspace_schemes.json; then
              APP_SCHEME="$WS_NAME"
            fi
          fi
          if [ -z "$APP_SCHEME" ]; then
            echo "ERROR: Could not determine app scheme. Available schemes:" >&2
            cat /tmp/xcworkspace_schemes.json >&2 || true
            exit 1
          fi
          echo "Selected app scheme: $APP_SCHEME"
          
          # Use simulator SDK to avoid physical device destination issues / missing iOS SDK complaints
          # Generic simulator destination avoids needing a specific runtime device name.
          set -x
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$APP_SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            build

  ci-success:
    runs-on: ubuntu-latest
    needs: [lint, build-library, android-validate, ios-validate]
    if: always()
    steps:
      - name: Check CI Results
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.build-library.result }}" == "success" && \
                "${{ needs.android-validate.result }}" == "success" && \
                "${{ needs.ios-validate.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "  - Lint: ${{ needs.lint.result }}"
            echo "  - Build Library: ${{ needs.build-library.result }}"
            echo "  - Android Expo: ${{ needs.android-validate.result }}"
            echo "  - iOS Expo: ${{ needs.ios-validate.result }}"
            exit 1
          fi
