// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SmileIDSecurity
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CryptoKit
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ArkanaKeys {
}
extension SmileIDSecurity.ArkanaKeys {
  public struct Global : SmileIDSecurity.ArkanaKeysGlobalProtocol {
    public init()
    @inline(__always) public let sENTRY_DSN: Swift.String
  }
}
public protocol ArkanaKeysGlobalProtocol {
  var sENTRY_DSN: Swift.String { get }
}
public protocol ArkanaKeysEnvironmentProtocol {
}
public enum SmileIDCryptoError : Swift.Error {
  case deriveKeyError
  case encodingError
  case cantReadSecretValueError
  public static func == (a: SmileIDSecurity.SmileIDCryptoError, b: SmileIDSecurity.SmileIDCryptoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SmileIDCryptoManager {
  public static let shared: SmileIDSecurity.SmileIDCryptoManager
  public func sign(timestamp: Swift.String, files: [Foundation.URL]) throws -> Swift.String
  public func sign(timestamp: Swift.String, headers: [Swift.String : Swift.String]? = nil, payload: Foundation.Data? = nil) throws -> Swift.String
  @objc deinit
}
extension SmileIDSecurity.SmileIDCryptoError : Swift.Equatable {}
extension SmileIDSecurity.SmileIDCryptoError : Swift.Hashable {}
